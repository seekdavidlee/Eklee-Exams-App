# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'vs2017-win2016'

variables:
- group: Deploy

steps:

- task: PowerShell@2
  displayName: 'Build app and configure stack variables'
  inputs:
    targetType: 'inline'
    script: |
      $path="env:$env:Build_SourceBranchName" + "_AppPrefix"
      $stackName = (get-item $path -ErrorAction SilentlyContinue).Value
      if (!$stackName) { $stackName = $env:AppPrefix + $env:Build_SourceBranchName }
      $stackName = $stackName.ToLower().Replace("-", "")
      Write-Host "stackName: $stackName"
      Write-Host "##vso[task.setvariable variable=stackName;]$stackName"
      npm install
      Write-Host "Install angular dependencies"
      npm install -g @angular/cli
      Write-Host "Angular CLI is installed."
      npm install
      Write-Host "Install angular CLI dependencies"
      ng test --watch=false
      ng build --prod --outputPath=$env:Build_ArtifactStagingDirectory
      $settings = @{ url="$env:GraphqlUrl" }
      $settings | ConvertTo-Json -depth 100 | Out-File -encoding $env:Build_ArtifactStagingDirectory\assets\graphql-config.json
      $zipLocation = "$env:Build_ArtifactStagingDirectory\$env:Build_BuildNumber.zip"
      Compress-Archive -Path $env:Build_ArtifactStagingDirectory\* -DestinationPath $zipLocation
      Write-Host "##vso[task.setvariable variable=zipLocation;]$zipLocation"

- task: PublishTestResults@2
  displayName: 'Publish tests results'
  inputs:
    testResultsFiles: '**/unit.xml'

- task: AzureResourceGroupDeployment@2
  displayName: 'Deploy stack resources'
  inputs:
    azureSubscription: '$(ServiceConnectionName)'
    resourceGroupName: '$(stackName)'
    location: '$(Location)'
    templateLocation: 'Linked artifact'
    csmFile: 'deployment\template.json'
    overrideParameters: '-stackName $(stackName) -clientId $(ClientId)'

- task: AzureRmWebAppDeployment@4
  displayName: 'Deploy app to prod'
  inputs:
    connectionType: 'AzureRM'
    azureSubscription: '$(ServiceConnectionName)'
    webAppName: '$(stackName)'
    resourceGroupName: '$(stackName)'
    appType: 'app'
    packageForLinux: '$(zipLocation)'